# -*- coding: utf-8 -*-
"""Copy of Major Choosing Selection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YlTM2RpWDUxI9G3JwJfCDoIMMe-EkRi5
"""

import pandas as pd

# Load your CSV
df = pd.read_csv("/content/sample_data/Predicting Engineering Major Choices  (Responses) - Form Responses 1.csv")

# Drop timestamp if exists
if 'Timestamp' in df.columns:
    df = df.drop(columns=['Timestamp', 'Name', 'Gender'])

# Rename long question headers
df.columns = [
    "Major",
    "Interest_Engines",
    "Interest_Aviation",
    "Work_Preference",
    "Excitement_Area",
    "Design_Challenge",
    "Project_Choice",
    "Work_Type",
    "Career_Sector",
    "Broader_Field_or_Studies",
    "Major_Reason"
]


# Preview the data

print(df.columns.tolist())

# -------------------------------
# 1. Target Variable: Chosen Major
df["Major"] = df["Major"].map({
    "Mechanical Engineering": 0,
    "Aeronautical Engineering": 1
})

# -------------------------------
# 2. Interest in Engines, Machines, or Mechanics (Linear Scale)
# Keep as-is, but ensure it's numeric
df["Interest_Engines"] = pd.to_numeric(df["Interest_Engines"], errors='coerce')

# -------------------------------
# 3. Interest in Planes or Aviation (Linear Scale)
df["Interest_Aviation"] = pd.to_numeric(df["Interest_Aviation"], errors='coerce')

# -------------------------------
# 4. Preference: Fluid vs Thermodynamics
df["Work_Preference"] = df["Work_Preference"].map({
    "Fluid dynamics and aerodynamics": 1,
    "Thermodynamics and mechanics": 0,
    "I like both equally": 0.5,
    "I’m not sure yet": None  # Or set to 0.5
})

# -------------------------------
# 5. What excites you the most?
df["Excitement_Area"] = df["Excitement_Area"].map({
    "Jet engines and aircraft systems": 1,
    "Space exploration and satellite systems": 1,
    "Robotics and mechanical devices": 0,
    "Automotive design and engines": 0
})

# -------------------------------
# 6. Design Challenges Enjoyed
df["Design_Challenge"] = df["Design_Challenge"].map({
    "Optimizing aerodynamic surfaces for aircraft": 1,
    "Designing energy-efficient mechanical parts": 0,
    "Both": 0.5,
    "Neither": 0
})

# -------------------------------
df["Project_Choice"] = df["Project_Choice"].map({
    "Designing a flight simulation system": 1.0,
    "Modeling a spacecraft component": 0.75,
    "Building an autonomous robot": 0.25,
    "Developing a fuel-efficient car engine": 0.0
})

# -------------------------------
# 8. Work Type Preference
df["Work_Type"] = df["Work_Type"].map({
    "Simulating or analyzing flight and aerodynamic behaviour": 1,
    "Designing and building mechanical systems": 0,
    "Both equally": 0.5
})

# -------------------------------
# 9. Sector Preference
df["Career_Sector"] = df["Career_Sector"].map({
    "Aerospace engineering": 1,
    "Automotive or manufacturing engineering": 0,
    "Research and academia": 0.5,
    "Still exploring": 0.5
})

# -------------------------------
# 10. Preference for Broad Career or Higher Studies
df["Broader_Field_or_Studies"] = df["Broader_Field_or_Studies"].map({
    "Yes": 1,
    "NO": 0
})

# -------------------------------
# 11. Reason Behind Major Choice
df["Major_Reason"] = df["Major_Reason"].map({
    "Peer pressure, Family or professor  pressure": 0,
    "No, it's my own choice": 1,
    "No, not so sure, I just chose one.": 0.5
})

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

# Ensure all features are numeric
X = df.drop(columns=['Major'])
y = df['Major']

# Handle missing values if any
X = X.fillna(0)

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the logistic regression model
model = LogisticRegression()
model.fit(X_train, y_train)

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Make predictions
y_pred = model.predict(X_test)

# Evaluation metrics
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

from sklearn.model_selection import GridSearchCV
import joblib

param_grid = {'C': [0.01, 0.1, 1, 10, 100]}
grid = GridSearchCV(LogisticRegression(), param_grid, cv=3)
grid.fit(X_train, y_train)

print("Best Parameters:", grid.best_params_)

joblib.dump(model, "logistic_model.pkl")

# Example new student data
new_student = pd.DataFrame([{
    'Interest_Engines': 4,
    'Interest_Aviation': 5,
    'Work_Preference': 1,
    'Excitement_Area': 1,
    'Design_Challenge': 1,
    'Project_Choice': 1,
    'Work_Type': 1,
    'Career_Sector': 1,
    'Broader_Field_or_Studies': 1,
    'Major_Reason': 1,
    # Include dummy columns if you used get_dummies (e.g., Project_Choice fields)
    # 'Project_Choice_Modeling a spacecraft component': 1,
    # ...
}])

prediction = model.predict(new_student)
print("Predicted Major:", "Aeronautical" if prediction[0] == 1 else "Mechanical")

!pip install streamlit
!pip install pyngrok

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import numpy as np
# import joblib
# 
# 
# #joblib.dump(model, "logistic_model.pkl")
# model = joblib.load("logistic_model.pkl")
# 
# st.title("🎓 Predict Your Engineering Major")
# st.subheader("Answer a few questions to see where your interest aligns.")
# 
# engines = st.slider("Interest in engines/machines", 1, 5, 3)
# aviation = st.slider("Interest in planes/aviation", 1, 5, 3)
# 
# work_pref = st.radio("Preferred work area:", [
#     "Fluid dynamics and aerodynamics",
#     "Thermodynamics and mechanics",
#     "I like both equally",
#     "I’m not sure yet"
# ])
# work_map = {
#     "Fluid dynamics and aerodynamics": 1,
#     "Thermodynamics and mechanics": 0,
#     "I like both equally": 0.5,
#     "I’m not sure yet": 0.5
# }
# 
# excite = st.radio("What excites you most?", [
#     "Jet engines and aircraft systems",
#     "Space exploration and satellite systems",
#     "Robotics and mechanical devices",
#     "Automotive design and engines"
# ])
# excite_map = {
#     "Jet engines and aircraft systems": 1,
#     "Space exploration and satellite systems": 1,
#     "Robotics and mechanical devices": 0,
#     "Automotive design and engines": 0
# }
# 
# design = st.radio("Preferred design challenge:", [
#     "Optimizing aerodynamic surfaces for aircraft",
#     "Designing energy-efficient mechanical parts",
#     "Both",
#     "Neither"
# ])
# design_map = {
#     "Optimizing aerodynamic surfaces for aircraft": 1,
#     "Designing energy-efficient mechanical parts": 0,
#     "Both": 0.5,
#     "Neither": 0
# }
# 
# project = st.radio("Final-year project choice:", [
#     "Designing a flight simulation system",
#     "Modeling a spacecraft component",
#     "Building an autonomous robot",
#     "Developing a fuel-efficient car engine"
# ])
# project_map = {
#     "Designing a flight simulation system": 1.0,
#     "Modeling a spacecraft component": 0.75,
#     "Building an autonomous robot": 0.25,
#     "Developing a fuel-efficient car engine": 0.0
# }
# 
# work_type = st.radio("Preferred work type:", [
#     "Simulating or analyzing flight and aerodynamic behaviour",
#     "Designing and building mechanical systems",
#     "Both equally"
# ])
# work_type_map = {
#     "Simulating or analyzing flight and aerodynamic behaviour": 1,
#     "Designing and building mechanical systems": 0,
#     "Both equally": 0.5
# }
# 
# career = st.radio("Where do you see yourself working?", [
#     "Aerospace engineering",
#     "Automotive or manufacturing engineering",
#     "Research and academia",
#     "Still exploring"
# ])
# career_map = {
#     "Aerospace engineering": 1,
#     "Automotive or manufacturing engineering": 0,
#     "Research and academia": 0.5,
#     "Still exploring": 0.5
# }
# 
# goal = st.radio("Broad field or higher studies?", ["Yes", "NO"])
# goal_map = {"Yes": 1, "NO": 0}
# 
# reason = st.radio("Why did you choose your major?", [
#     "Peer pressure, Family or professor  pressure",
#     "No, it's my own choice",
#     "No, not so sure, I just chose one."
# ])
# reason_map = {
#     "Peer pressure, Family or professor  pressure": 0,
#     "No, it's my own choice": 1,
#     "No, not so sure, I just chose one.": 0.5
# }
# 
# # Make prediction
# if st.button("Predict"):
#     inputs = np.array([[
#         engines,
#         aviation,
#         work_map[work_pref],
#         excite_map[excite],
#         design_map[design],
#         project_map[project],
#         work_type_map[work_type],
#         career_map[career],
#         goal_map[goal],
#         reason_map[reason]
#     ]])
# 
#     prediction = model.predict(inputs)[0]
#     result = "🛩️ You tend to choose **Aeronautical Engineering**." if prediction == 1 else "⚙️ You tend to choose **Mechanical Engineering**."
#     st.success(result)
#

from pyngrok import conf, ngrok

conf.get_default().auth_token = "2xqylLYbhtUzK7bGCDf6hDgYQcR_6Bk1hd5z4VJnx2sobZhMr"

# Corrected tunnel command with protocol
public_url = ngrok.connect(8501)

print(f"👇 Your app is live at:\n{public_url}")

!streamlit run app.py &>/dev/null &
